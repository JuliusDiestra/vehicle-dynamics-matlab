function [dotX,A,B] = carLinearVxConstant(in1,delta,vx,in4)
%CARLINEARVXCONSTANT
%    DOTX = CARLINEARVXCONSTANT(X,U,vx,params)
%   Inputs:
%       X       : State vector = [vy d_psi]'
%                   vy      : Car lateral velocity [m/s]
%                   d_psi   : Yaw-rate [rad/s]
%       U       : Input vector = [delta]'
%                   delta   : Steering-angle [rad]
%       vx      : Car longitudinal velocity [m/s]
%       params  : Parameters = [Cy1 Cy2 l1 l2 m J]'
%                   Cy1     : Cornering stiffness of front wheel.
%                   Cy2     : Cornering stiffness of rear wheel.
%                   l1      : Distance between front axle and centre of gravity. Unit: [m]
%                   l2      : Distance between rear axle and centre of gravity. Unit: [m]
%                   m       : Vehicle mass. Unit: [Kg]
%                   J       : Inertia around z-axis of vehicle Unit. Unit: [Kg.m^2]
%   Outputs:
%       dotX    : Symbolic expression of dotX = dX/dt = [d_vy dd_psi] 
%       A       : Matrix from linear expression dX/dt = A*X + B*U
%       B       : Matrix from linear expression dX/dt = A*X + B*U
%   Author : Julius D.

%    This function was generated by the Symbolic Math Toolbox version 8.5.
%    11-Feb-2021 13:29:43

Cy1 = in4(1,:);
Cy2 = in4(2,:);
J = in4(6,:);
d_psi = in1(2,:);
l1 = in4(3,:);
l2 = in4(4,:);
m = in4(5,:);
vy = in1(1,:);
t2 = Cy1.*l1;
t3 = Cy2.*l2;
t4 = l1.^2;
t5 = l2.^2;
t6 = vx.^2;
t7 = Cy1+Cy2;
t8 = 1.0./J;
t9 = 1.0./m;
t10 = 1.0./vx;
t11 = -t3;
t12 = m.*t6;
t13 = t2+t11+t12;
dotX = [Cy1.*delta.*t9-d_psi.*t9.*t10.*t13-t7.*t9.*t10.*vy;-t8.*t10.*(t2.*vy+t11.*vy+d_psi.*l1.*t2+d_psi.*l2.*t3-delta.*t2.*vx)];
if nargout > 1
    A = reshape([-t7.*t9.*t10,-t8.*t10.*(t2+t11),-t9.*t10.*t13,-t8.*t10.*(l1.*t2+l2.*t3)],[2,2]);
end
if nargout > 2
    B = [Cy1.*t9;t2.*t8];
end
